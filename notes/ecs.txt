Types
  map (TypeID, Type)
  Type {
    id, mod, name, namespace, size, alignment,
    dynamic struct {init, deinit, get, getRaw, set, setRaw},
    init, deinit, print
  }

Archetype {
  id,
  entity_ids: List(EntityID),
  shared_ids: List(SharedID),
  component_ids: List(TypeID),
  columns: map(Type, List(u8))

  init, deinit, print
  create, destroy
  get, set

  Signature {
    shared_ids: List(SharedID),
    component_ids: List(TypeID),

    init, deinit
    addComponent, removeComponent
    addShared, removeShared
    hash
  }
}

Shared {
  map: Map(SharedID, SharedEntry)

  SharedEntry{
    id: SharedID,
    Type: Type,
    name: []u8,
    buffer: []u8
  }

  init, deinit
  has, get, set
}

Query {
  ...
}

World {
  alloc
  types
  shared
  pointers
  archetypes

  init, deinit

  create, destroy

  has, get, set
  getRaw, setRaw
}
